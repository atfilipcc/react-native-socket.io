{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar initialState = {\n  onlineUsers: [],\n  currentUser: '',\n  chatMessages: []\n};\nexport var reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"users_online\":\n      var chatMessages = _objectSpread({}, state.chatMessages);\n\n      var onlineUsers = action.data;\n\n      for (var i = 0; i < onlineUsers.length; i++) {\n        var userId = onlineUsers[i].userId;\n\n        if (chatMessages[userId] === undefined) {\n          chatMessages[userId] = {\n            messages: [],\n            username: onlineUsers[i].username\n          };\n        }\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        onlineUsers: onlineUsers,\n        chatMessages: chatMessages\n      });\n\n    case \"get_current_user\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        currentUser: action.data\n      });\n\n    case \"pm\":\n      var chatId = action.data.chatId;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        chatMessages: _objectSpread(_objectSpread({}, state.chatMessages), {}, _defineProperty({}, chatId, _objectSpread(_objectSpread({}, state.chatMessages[chatId]), {}, {\n          messages: [action.data.message].concat(_toConsumableArray(state.chatMessages[chatId].messages))\n        })))\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/mnt/c/Users/Filip/Documents/Dev/react-native-ui/react-native-ui/redux/reducer.tsx"],"names":["initialState","onlineUsers","currentUser","chatMessages","reducer","state","action","type","data","i","length","userId","undefined","messages","username","chatId","message"],"mappings":";;;;;;;AAEA,IAAMA,YAAyB,GAAG;AAC9BC,EAAAA,WAAW,EAAE,EADiB;AAE9BC,EAAAA,WAAW,EAAE,EAFiB;AAG9BC,EAAAA,YAAY,EAAE;AAHgB,CAAlC;AAME,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAgD;AAAA,MAA/CC,KAA+C,uEAAvCL,YAAuC;AAAA,MAAzBM,MAAyB;;AACrE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,cAAL;AACE,UAAMJ,YAAY,qBAAQE,KAAK,CAACF,YAAd,CAAlB;;AACA,UAAMF,WAAW,GAAGK,MAAM,CAACE,IAA3B;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,WAAW,CAACS,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3C,YAAME,MAAM,GAAGV,WAAW,CAACQ,CAAD,CAAX,CAAeE,MAA9B;;AACA,YAAIR,YAAY,CAACQ,MAAD,CAAZ,KAAyBC,SAA7B,EAAwC;AACtCT,UAAAA,YAAY,CAACQ,MAAD,CAAZ,GAAuB;AACrBE,YAAAA,QAAQ,EAAE,EADW;AAErBC,YAAAA,QAAQ,EAAEb,WAAW,CAACQ,CAAD,CAAX,CAAeK;AAFJ,WAAvB;AAID;AACF;;AACD,6CAAYT,KAAZ;AAAmBJ,QAAAA,WAAW,EAAXA,WAAnB;AAAgCE,QAAAA,YAAY,EAAZA;AAAhC;;AACF,SAAK,kBAAL;AACE,6CAAYE,KAAZ;AAAmBH,QAAAA,WAAW,EAAEI,MAAM,CAACE;AAAvC;;AACF,SAAK,IAAL;AACE,UAAMO,MAAM,GAAGT,MAAM,CAACE,IAAP,CAAYO,MAA3B;AACA,6CACKV,KADL;AAEEF,QAAAA,YAAY,kCACPE,KAAK,CAACF,YADC,2BAETY,MAFS,kCAGLV,KAAK,CAACF,YAAN,CAAmBY,MAAnB,CAHK;AAIRF,UAAAA,QAAQ,GACNP,MAAM,CAACE,IAAP,CAAYQ,OADN,4BAEHX,KAAK,CAACF,YAAN,CAAmBY,MAAnB,EAA2BF,QAFxB;AAJA;AAFd;;AAaF;AACE,aAAOR,KAAP;AAhCJ;AAkCD,CAnCM","sourcesContent":["import { IReduxAction, IReduxState } from \"../types\";\n\nconst initialState: IReduxState = {\n    onlineUsers: [],\n    currentUser: '',\n    chatMessages: [],\n  };\n  \n  export const reducer = (state = initialState, action: IReduxAction) => {\n    switch (action.type) {\n      case \"users_online\":\n        const chatMessages = { ...state.chatMessages };\n        const onlineUsers = action.data;\n        for (let i = 0; i < onlineUsers.length; i++) {\n          const userId = onlineUsers[i].userId;\n          if (chatMessages[userId] === undefined) {\n            chatMessages[userId] = {\n              messages: [],\n              username: onlineUsers[i].username,\n            };\n          }\n        }\n        return { ...state, onlineUsers, chatMessages };\n      case \"get_current_user\":\n        return { ...state, currentUser: action.data };\n      case \"pm\":\n        const chatId = action.data.chatId;\n        return {\n          ...state,\n          chatMessages: {\n            ...state.chatMessages,\n            [chatId]: {\n              ...state.chatMessages[chatId],\n              messages: [\n                action.data.message,\n                ...state.chatMessages[chatId].messages,\n              ],\n            },\n          },\n        };\n      default:\n        return state;\n    }\n  };"]},"metadata":{},"sourceType":"module"}